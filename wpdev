#!/bin/bash

### Script to automatically create an ubiquitous Wordpress development environment
### It uses next docker containers, thus it only works if your system has docker installed
### orboan/dcsss-mariadb
### orboan/dcsss-httpd-wpdev
### kdelfour/cloud9-docker

# Autor: Oriol Boix Anfosso <dev@orboan.com>
# Licensed under GPLv3
# https://github.com/orboan/wpdev

#set -e

if [[ "$PWD" == "$HOME" ]]; then
echo
echo "Please run this script from within a dedicated subdirectory of $HOME directory."
echo
exit 1
fi

trap "exit 1" TERM
export TOP_PID=$$

file=./wpdev.conf
time=`date`

################
### defaults ###
################
s=false
f=false
n=false
domain=localhost
password=webapp
mysql_root_password=mariadb
mysql_db=wordpress
mysql_user=wpuser
mysql_password=wordpress
mysql_host=mysql_wp
protocol=http
wp_port=82
wp_ssh_port=2222
wp_supervisor_port=9002
wp_shellinabox_port=9102
db_port=3306
db_ssh_port=2223
db_supervisor_port=9003
db_shellinabox_port=9103
c9_port=81


#################
### functions ###
#################

function check() {
msg="Error: Bad or empty argument value."
if [[ $1 == "-"* ]]; then
  echo $msg
  exit 5
fi
if [[ $1 == "--"* ]]; then
  echo $msg
  exit 5
fi
}

function error_and_exit {
echo 
echo 
echo "Error from line $1. Cleaning and exiting..."
echo
echo

if [ -f ./latest.tar.gz ]; then
mv ./latest.tar.gz ../
fi

docker rm -f $(docker ps -aq) &> /dev/null

if [[ "$PWD" != "$HOME" ]]; then
if [ "${PWD##/home/}" != "${PWD}" ]; then
sudo rm -rf *
fi
fi

if [ -f ../latest.tar.gz ]; then
mv ../latest.tar.gz ./
fi

kill -s TERM $TOP_PID
}

trap 'error_and_exit $LINENO' ERR

function create_network {
docker network create iawnet &>/dev/null || echo "docker network iawnet already exists"
}

function run_mysql {
docker run -d --name=$mysql_host --network="iawnet" -p $db_port:3306 -p $db_ssh_port:22 -p $db_supervisor_port:9001  -e PASSWORD=$password -e SHELLINABOX_PORT=$db_shellinabox_port -p $db_shellinabox_port:4200 -e MYSQL_ROOT_PASSWORD=$mysql_root_password -e MYSQL_DATABASE1=$mysql_db -e MYSQL_USER1=$mysql_user -e MYSQL_PASSWORD1=$mysql_password -v `pwd`/db:/var/lib/mysql orboan/dcsss-mariadb
}

function run_wpdev {
docker run -d --name wpdev  --network="iawnet" -p $wp_port:80 -p $wp_ssh_port:22 -p $wp_supervisor_port:9001 -e PASSWORD=$password -e SHELLINABOX_PORT=$wp_shellinabox_port -p $wp_shellinabox_port:4200 -e MYSQL_HOST=$mysql_host -e MYSQL_DATABASE=$mysql_db -e MYSQL_USER=$mysql_user -e MYSQL_PASSWORD=$mysql_password -e WP_URL="$protocol://$domain" -v `pwd`:/data orboan/dcsss-httpd-wpdev
}

function run_cloud9 {
docker run -d --name cloud9  --network="iawnet" -p $c9_port:80 -v `pwd`/www/html:/workspace/ kdelfour/cloud9-docker
}

function download_wp {
wget https://wordpress.org/latest.tar.gz -O ./latest.tar.gz
}

function init_wpconfig {
rm ./www/html/wp-config*.php
mv ./wp-config.php ./www/html
}

function init_wp {
docker cp wpdev:/var/www/html/wp-config.php ./
tar -xzvf latest.tar.gz > /dev/null
if [[ -d "./www/html/wp-content" ]]; then
cp -r ./www/html/wp-content ./
fi
rm -rf ./www/html/*
cp -r wordpress/* ./www/html/
rm -rf wordpress
if [[ -d "./wp-content" ]]; then
rm -rf ./www/html/wp-content
cp -r ./wp-content ./www/html/
rm -rf ./wp-content
fi
init_wpconfig
}

function printvar(){
echo "#########################"
echo "### Variables set to: ###"
echo "#########################"
echo "time:$time" > $file
echo "action:$action" >> $file
echo "domain:$domain" >> $file
echo "password:$password" >> $file
echo "mysql-host:$mysql_host" >> $file
echo "mysql-root-password:$mysql_root_password" >> $file
echo "mysql-db:$mysql_db" >> $file
echo "mysql-user:$mysql_user" >> $file
echo "mysql-password:$mysql_password" >> $file
echo "wp-port:$wp_port" >> $file
echo "wp-ssh-port:$wp_ssh_port" >> $file
echo "wp-supervisor-port:$wp_supervisor_port" >> $file
echo "wp-shellinabox-port:$wp_shellinabox_port" >> $file
echo "db-port:$db_port" >> $file
echo "db-ssh-port:$db_ssh_port" >> $file
echo "db-supervisor-port:$db_supervisor_port" >> $file
echo "db-shellinabox-port:$db_shellinabox_port" >> $file
echo "c9-port:$c9_port" >> $file
echo "secure:$s" >> $file
echo "force-download:$f" >> $file
cat $file
}

function start() {
docker start mysql
docker start wpdev
docker start cloud9
sed -i "1s/.*/time:$time/" $file
sed -i "2s/.*/action:$action/" $file
}

function stop(){
docker stop cloud9
docker stop wpdev
docker stop mysql
sed -i "1s/.*/time:$time/" $file
sed -i "2s/.*/action:$action/" $file
}

function remove(){
docker rm -f cloud9
docker rm -f wpdev
docker rm -f mysql
sed -i "1s/.*/time:$time/" $file
sed -i "2s/.*/action:$action/" $file
}


################################
### Parsing script arguments ###
################################

#getopt is used for handling sript arguments
#getopt is so old that is 99% for sure it is included in your linux
#just in case:
#`getopt --test` to check if getopt is available on this system

#getopt --test #>/dev/null
#err=$?
#if [[ $err -ne 4 ]]; then
#    echo "I’m sorry, `getopt --test` failed in this environment."
#    exit 1
#fi

### Options:
## -d or --domain: domain name used for this wordpress. 
#  This is the value assigned to $WP_SITEURL and $WP_HOME in wp-config.php 
## -p or --password: os password for user named www
#  Use these credentials to login into the container with ssh
#  Use these credentials to authenticate against the supervisor web ui
## -m or --mysql-host: host and container name for mariadb container
## -r or --mysql-root-password: password for the root user of the mariadb rdbms
## -b or --mysql-db: to name the wordpress database
## -u or --mysql-user: to name the mariadb user with privileges on to the wordpress database
## -w or --mysql-password: to set the password for the mariadb user specified with -u
## -f or --force-core-update: force the download of the latest wordpress and update the core
#  (even if it is already downloaded)
## -s or --secure: to set the https protocol (by default it is http)
## -n or --clean-database: to reset the mysql database. All db changes are lost, so be carefull
## --wp-port: port used to access wordpress by http
## --wp-ssh-port: port used to ssh into wp container
## --wp-supervisor-port: port used to access the supervisor web ui in the wp container
## --wp-shellinabox-port: port used to access shellinabox (wp container)
## --db-port: port used to access mariadb container (default is 3306)
## --db-ssh-port: port used to ssh into mariadb container
## --db-supervisor-port: port used to access the supervisor web ui in the mariadb container
## --db-shellinabox-port: port used to access shellinabox (mariadb container)
## --c9-port: port used to access Cloud9 container (http)

SHORT=d:p:m:r:b:u:w:fsn
LONG=domain:,password:,mysql-host:,mysql-root-password:,mysql-db:,mysql-user:,mysql-password:,force-core-update,secure,clean-database,wp-port:,wp-ssh-port:,wp-supervisor-port:,wp-shellinabox-port:,db-port:,db-ssh-port:,db-supervisor-port:,db-shellinabox-port:,c9-port:

# -temporarily store output to be able to check for errors
# -activate advanced mode getopt quoting e.g. via “--options”
# -pass arguments only via   -- "$@"   to separate them correctly
PARSED=`getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@"`
if [[ $? -ne 0 ]]; then
    # e.g. $? == 1
    # then getopt has complained about wrong arguments to stdout
    exit 2
fi

# use eval with "$PARSED" to properly handle the quoting
eval set -- "$PARSED"
# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -d|--domain)            
	    domain="$2"
	    check $domain
            shift 2
            ;;
        -p|--password)
	    password="$2"
            check $password
            shift 2
	    ;;
        -m|--mysql-host)
	    mysql_host="$2"
            check $mysql_host
            shift 2
            ;;
  	-r|--mysql-root-password)
	    mysql_root_password="$2"
            check $mysql_root_password
	    shift 2
	    ;;
	-b|--mysql-db)
	    mysql_db="$2"
	    check $mysql_db
	    shift 2
	    ;;
	-u|--mysql-user)
	    mysql_user="$2"
	    check $mysql_user
	    shift 2
	    ;;
	-w|--mysql-password)
	    mysql_password="$2"
	    check $mysql_password
	    shift 2
	    ;;
        --wp-port)
            wp_port="$2"
            check $wp_port
            shift 2
            ;;
        --wp-ssh-port)
            wp_ssh_port="$2"
            check $wp_ssh_port
            shift 2
            ;;
        --wp-supervisor-port)
            wp_supervisor_port="$2"
            check $wp_supervisor_port
            shift 2
            ;;
        --wp-shellinabox-port)
            wp_shellinabox_port="$2"
            check $wp_shellinabox_port
            shift 2
            ;;
        --db-port)
            bd_port="$2"
            check $db_port
            shift 2
            ;;
        --db-ssh-port)
            db_ssh_port="$2"
            check $db_ssh_port
            shift 2
            ;;
        --db-supervisor-port)
            db_supervisor_port="$2"
            check $db_supervisor_port
            shift 2
            ;;
        --db-shellinabox-port)
            db_shellinabox_port="$2"
            check $db_shellinabox_port
            shift 2
            ;;
        --c9-port)
            c9_port="$2"
            check $c9_port
            shift 2
            ;;
	-s|--secure)
	    s=true
	    shift
	    ;;		
	-f|--force)
            f=true
            shift
            ;;
        -n|--clean-database)
            n=true
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

# handle non-option arguments
if [[ $# -ne 1 ]]; then
    echo "$0: Error in passed command arguments"
    exit 4
fi

action=$1

if [[ $action == "run" ]]; then
if [[ "$n" == "true" ]]; then
sudo rm -rf ./db
fi
create_network
run_mysql 2>/dev/null || (docker rm -f $mysql_host && run_mysql)
run_wpdev 2>/dev/null || (docker rm -f wpdev && run_wpdev)
run_cloud9 2>/dev/null || (docker rm -f cloud9 && run_cloud9)
if [ ! -f ./latest.tar.gz ]; then
    echo "Downloading latest wordpress..."
    download_wp
    f=false
fi
if [[ -f ./latest.tar.gz && "$f" == "true" ]]; then
    echo "Downloading latest wordpress..."
    download_wp
fi
if [ ! -f "www/html/wp-config.php" ]; then
  init_wp
  f=false
fi
if [[ -f "www/html/wp-config.php" && "$f" == "true" ]]; then
  init_wp
fi
printvar
exit 0
fi

if [[ $action == "start" ]]; then
start
exit 0
fi

if [[ $action == "stop" ]]; then
stop
exit 0
fi

if [[ $action == "restart" ]]; then
stop
start
exit 0
fi

if [[ $action == "rm" ]]; then
remove
exit 0
fi

echo "Error: Action is incorrect."
exit 6


